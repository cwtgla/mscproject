Dataset folder problem down into <..>prec.txt files which contain values to be compressed. Files <...>prec_expected.txt contain the decimal values the unsigned bytes in the 24 bit structure should be. See below for reasoning on values chosen and working.


Working for:
--------------------------------------------------------------------------------------------------------------------------------------
	5 Mag 18 Prec. 
	2^5 = 32 possible values, 31 highest magnitude value. 
	2^18 = 262144 possible values, .262143 highest precision value. Multiply precision decimal by 100,000 to get the value as an integer to 5 decimal places.
	We represent 0-99,999 as a magnitude, since if we used the extra bit we'd still lose precision as only up to 262k can be represented and it'd cause more complexity and overhead checking if we can be slightly more precise.

	Values in 1-5-18 dataset (sign-mag-prec). Values chosen to represent the various states that data can be in (sign bit present/not, pushing limit of what can be stored etc.)

	31.15115643
	3.12009501
	0.10238767
	-5.08325113
	-31.04582059

	Value breakdown
		31.15115643
			sign: 0000
			31: 0000 0000 0001 1111
			15115: 0011 1011 0000 1011
			combined: 0111 1100 0011 1011 0000 1011
			values:   	124			59		11

		3.12009501
			sign: 0000
			3: 0000 0000 0000 0011
			12009: 0010 1110 1110 1001
			combined: 0000 1100 0010 1110 1110 1001
			values:		12			46		233

		0.10238767
			sign: 0000
			0: 0000 0000 0000 0000
			10238: 0010 0111 1111 1110
			combined: 0000 0000 0010 0111 1111 1110
			values:		0			39		254

		-15.08325113
			sign: 0001
			15: 0000 0000 0000 1111
			8325: 0010 0000 1000 0101
			combined: 1011 1100 0010 0000 1000 0101
			combined: 1011 1100 0010 0000 1000 0101
			values:		188			32		133

		-30.04582059
			sign: 0001
			30: 0000 0000 0001 1110
			4582: 0001 0001 1110 0110
			combined: 1111 1000 0001 0001 1110 0110
			values: 	248			17		230
--------------------------------------------------------------------------------------------------------------------------------------
	13 Mag 10 Prec. 
	2^13 = 8192 possible values, 8191 highest magnitude value.
	2^10 = 1024 possible values, 1023 highest precision value. Multiply precision decimal by 1000 to get the value as an integer to 3 decimal places.
	We can represent 0-999 as a magnitude, since if we used the extra bit we'd still lose precision as only up to 1023 can be represented and it'd cause more complexity and overhead checking if we can be slightly more precise.

	Values in 1-13-10 dataset (sign-mag-prec). Values chosen to represent the various states that data can be in (sign bit present/not, pushing limit of what can be stored etc.)

	8191.1313813
	2000.2008
	0.0024
	-245.42424
	-8191.249294

	Value breakdown
		8191.1313813
			sign: 0000
			8191: 0001 1111 1111 1111
			131: 1000 0011
			combined: 0111 1111 1111 1100 1000 0011
			values:		127			252			131


		2000.2008
			sign: 0000
			2000: 0111 1101 0000
			200: 1100 1000
			combined: 0001 1111 0100 0000 1100 1000
			values:		31			64			200

		0.0024
			sign: 0000
			0: 0000
			2: 10
			combined: 0000 0000 0000 0000 0000 0010
			values:		0			0			2

		-245.42424
			sign: 0001
			245: 1111 0101
			424: 0001 1010 1000
			combined: 1000 0011 1101 0101 1010 1000
			values:		131			213			168

		-8191.249294
			sign: 0001
			8191: 0001 1111 1111 1111
			249: 1111 1001
			combined: 1111 1111 1111 1100 1111 1001
			values:		255			252			249

--------------------------------------------------------------------------------------------------------------------------------------
	7 Mag 16 Prec.
	2^7 = 128 possible values, 127 highest magnitude value.
	2^16 = 65536 possible values, 65535 highest precision value. Multiply precision decimals by 10,000 to get the value as an integer to 4 decimal places (we can represent 0-9999 since with 5dp max is 65535 and we'd lose precision using it or extra overhead by seeing if we can store some values with extra precision and others without).

	Values in 1-7-16 dataset (sign-mag-prec). Values chosen to represent the various states that data can be in (sign bit present/not, pushing limit of what can be stored etc.)

	127.14914914
	15.22223399
	0.19442424
	-102.4241112
	-127.2942485607

	Value breakdown
		127.14914914
			sign: 0000
			127: 0000 0000 0111 1111
			1491: 0000 0000 0101 1101 0011
			combined: 0111 1111 0000 0101 1101 0011
			values:    127			5		211

		15.22223399
			sign: 0000
			15: 0000 0000 0000 1111
			2222: 0000 1000 1010 1110
			combined: 0000 1111 0000 1000 1010 1110
			values:		15			8		174

		0.19442424
			sign: 0000
			0: 0000 0000 0000 0000
			1944: 0000 0111 1001 1000
			combined: 0000 0000 0000 0111 1001 1000
			values:		0			7		152

		-102.4241112
			sign: 0001
			102: 0000 0110 0110
			4241: 0001 0000 1001 0001
			combined: 1110 0110 0001 0000 1001 0001
			values:		230			16		145

		-127.2942485607
			sign: 0001
			127: 0000 0000 0111 1111
			2942: 0000 1011 0111 1110
			combined: 1111 1111 0000 1011 0111 1110
			values: 	255			11		126
